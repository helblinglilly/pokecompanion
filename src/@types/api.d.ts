/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all Tags for a specific user */
        get: operations["GetAllTagsForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pokemon/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetPokemonById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TagContents: {
            move?: {
                /**
                 * Format: double
                 * @description Pokeapi ID for this move
                 */
                id: number;
                /** @description ISO Date string */
                added: string;
            }[];
            pokemon?: {
                /** @description The Query Param URL string that needs to be attached to get to this Pokemon */
                variety: string;
                shiny: boolean;
                /**
                 * Format: double
                 * @description National Pokedex ID
                 */
                id: number;
                /**
                 * @description null-ish assumed to be male
                 * @enum {string}
                 */
                gender?: "male" | "female";
                /** @description ISO Date string */
                added: string;
            }[];
        };
        Tags: {
            id: string;
            collectionId: string;
            collectionName: string;
            expand?: {
                [key: string]: unknown;
            };
            created: string;
            updated: string;
            /** @description The user id */
            owner: string;
            name: string;
            contents: components["schemas"]["TagContents"];
            isPrivate: boolean;
            showGenderAndShiny: boolean;
            /** @enum {string} */
            sortOrder: "desc" | "asc" | "custom";
            /** @enum {string} */
            sortKey: "id" | "added" | "alphabetical" | "custom";
            description: string;
            isHiddenAcrossSite: boolean;
        };
        Tag: {
            id: string;
            name: string;
            isPrivate: boolean;
            isHiddenAcrossSite: boolean;
            showGenderAndShiny: boolean;
            /** @enum {string} */
            sortKey: "added" | "id" | "alphabetical" | "custom";
            /** @enum {string} */
            sortOrder: "desc" | "asc" | "custom";
            description: string;
            contents: components["schemas"]["TagContents"];
            /** @description The user id of the owner */
            owner: string;
        };
        TagRootResponse: {
            tags: components["schemas"]["Tag"][];
            /** Format: double */
            totalPages: number;
        };
        /** @enum {string} */
        PokeapiLanguageCodes: "ja-Hrkt" | "ja" | "ko" | "fr" | "de" | "en" | "es";
        Type: {
            /** @description The Pokeapi name for this type */
            name: string;
            /** @description Path to the URL which will point at sprites.pokecompanion.com */
            icon: string;
        };
        /** @enum {string} */
        PokeapiVersionGroups: "home" | "red-blue" | "yellow" | "gold-silver" | "crystal" | "ruby-sapphire" | "emerald" | "firered-leafgreen" | "diamond-pearl" | "platinum" | "heartgold-soulsilver" | "black-white" | "black-2-white-2" | "x-y" | "omega-ruby-alpha-sapphire" | "sun-moon" | "ultra-sun-ultra-moon" | "lets-go-pikachu-lets-go-eevee" | "sword-shield" | "brilliant-diamond-and-shining-pearl" | "legends-arceus" | "scarlet-violet" | "legends-za";
        PokeapiNamedApiResource: {
            /** @description Short name */
            name: string;
            /** @description https://pokeapi.co/api/v2/.../entry/id/ */
            url: string;
        };
        /** @description Make all properties in T optional */
        "Partial_Record_PokeapiVersionGroups._levelup-Array__id-number--level-number__--tm-Array__id-number__--breed-Array__id-number__--tutor-Array__id-number__--other-Array__id-number--learnMethod-string_____": {
            home?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "red-blue"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            yellow?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "gold-silver"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            crystal?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "ruby-sapphire"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            emerald?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "firered-leafgreen"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "diamond-pearl"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            platinum?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "heartgold-soulsilver"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "black-white"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "black-2-white-2"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "x-y"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "omega-ruby-alpha-sapphire"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "sun-moon"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "ultra-sun-ultra-moon"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "lets-go-pikachu-lets-go-eevee"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "sword-shield"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "brilliant-diamond-and-shining-pearl"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "legends-arceus"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "scarlet-violet"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
            "legends-za"?: {
                other: {
                    learnMethod: string;
                    /** Format: double */
                    id: number;
                }[];
                tutor: {
                    /** Format: double */
                    id: number;
                }[];
                breed: {
                    /** Format: double */
                    id: number;
                }[];
                tm: {
                    /** Format: double */
                    id: number;
                }[];
                levelup: {
                    /** Format: double */
                    level: number;
                    /** Format: double */
                    id: number;
                }[];
            };
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_": {
            [key: string]: {
                conditions: string[];
                /** Format: double */
                chance: number;
                /** Format: double */
                maxLevel: number;
                /** Format: double */
                minLevel: number;
                method: string;
            }[];
        };
        /** @description Make all properties in T optional */
        "Partial_Record_PokeapiGameNames.Record_string.Array__method-string--minLevel-number--maxLevel-number--chance-number--conditions-Array_string______": {
            home?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            red?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            blue?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            yellow?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            gold?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            silver?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            crystal?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            ruby?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            sapphire?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            emerald?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            firered?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            leafgreen?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            diamond?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            pearl?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            platinum?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            heartgold?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            soulsilver?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            black?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            white?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "black-2"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "white-2"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            x?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            y?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "omega-ruby"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "alpha-sapphire"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            sun?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            moon?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "ultra-sun"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "ultra-moon"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "lets-go-pikachu"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "lets-go-eevee"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            sword?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            shield?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "brilliant-diamond"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "shining-pearl"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "legends-arceus"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            scarlet?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            violet?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "legends-za"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "the-isle-of-armor"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "the-crown-tundra"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "the-teal-mask"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
            "the-indigo-disk"?: components["schemas"]["Record_string._method-string--minLevel-number--maxLevel-number--chance-number--conditions-string-Array_-Array_"];
        };
        StatValue: {
            /** Format: double */
            stat: number;
            /** Format: double */
            effort: number;
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_PokeapiStatType.StatValue_": {
            hp: components["schemas"]["StatValue"];
            attack: components["schemas"]["StatValue"];
            defense: components["schemas"]["StatValue"];
            speed: components["schemas"]["StatValue"];
            "special-attack": components["schemas"]["StatValue"];
            "special-defense": components["schemas"]["StatValue"];
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_average.StatValue_": {
            average: components["schemas"]["StatValue"];
        };
        PokemonV1Response: {
            /** Format: double */
            id: number;
            name: string;
            pokedexEntries: {
                textEntry: string;
                /** @description A display friendly game name, NOT the pokeapi name */
                game: string;
                language: components["schemas"]["PokeapiLanguageCodes"];
            }[];
            /**
             * Format: double
             * @description Height in cm
             * @example 176
             */
            height: number;
            /**
             * Format: double
             * @description Weight in grams
             * @example 3500
             */
            weight: number;
            /**
             * @description Path to a .ogg file with this pokemon's cry
             * @example https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/3.ogg
             */
            cry: string;
            sprites: {
                isBack: boolean;
                hasFemale: boolean;
                hasShiny: boolean;
                alt: string;
                url: string;
            }[];
            types: {
                weakAgainst: (components["schemas"]["Type"] & {
                    /** Format: double */
                    multiplier: number;
                })[];
                resists: (components["schemas"]["Type"] & {
                    /** Format: double */
                    multiplier: number;
                })[];
                own: components["schemas"]["Type"][];
            };
            evolutionChain: {
                /** @description Indicates wheather both source + target evolutions are present in the current game.
                 *     An imperfect measure since it is based on the national dex ID and does not take variants
                 *     or gender into account
                 *     Some Pokemon, as well as having an evolution at all, are also region locked so they can only
                 *     evolve in that specific region. https://github.com/PokeAPI/pokeapi/issues/1315 */
                isValidInGame: boolean;
                target: {
                    /**
                     * @description The URL that should be navigated to when this Pokemon is clicked
                     * @example /pokemon/4
                     */
                    pokemonUrl: string;
                    /**
                     * @description URL for the sprite of this Pokemon
                     * @example https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png
                     */
                    spriteUrl: string;
                };
                /** @description Additional requirements that will only be */
                requirements: {
                    supplementary?: string;
                    info: string | number;
                    /** @enum {string} */
                    type: "hold-item" | "friendship" | "shed" | "three-critical-hits" | "beauty" | "rain" | "daytime" | "trade_for" | "party_have" | "other" | "stats" | "know_move" | "know_move_type" | "affection" | "location" | "level-up" | "use-item" | "recoil-damage" | "battle-leader" | "game-specific" | "no-animation" | "multiplayer" | "use-move" | "gender" | "party_type" | "collect_items";
                }[];
                /**
                 * @description Description of what will trigger the evolution
                 * @example Level 24
                 */
                trigger: string;
                source: {
                    /**
                     * @description The URL that should be navigated to when this Pokemon is clicked
                     * @example /pokemon/4
                     */
                    pokemonUrl: string;
                    /**
                     * @description URL for the sprite of this Pokemon
                     * @example https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png
                     */
                    spriteUrl: string;
                };
            }[];
            presenceInGame: {
                /** @enum {number|null} */
                pokedexNumber: null;
                /** @enum {boolean} */
                present: false;
                /**
                 * @description Playback of the game that was used in the request - mostly for clarity
                 * @example scarlet-violet
                 */
                game: components["schemas"]["PokeapiVersionGroups"];
            } | {
                /** Format: double */
                pokedexNumber: number;
                /** @enum {boolean} */
                present: true;
                /**
                 * @description Playback of the game that was used in the request - mostly for clarity
                 * @example scarlet-violet
                 */
                game: components["schemas"]["PokeapiVersionGroups"];
            };
            abilities: {
                /** Format: double */
                slot: number;
                is_hidden: boolean;
                ability: components["schemas"]["PokeapiNamedApiResource"];
            }[];
            varieties: {
                pokecompanionUrl: string;
                isDefault: boolean;
                displayName: string;
                name: string;
            }[];
            moves: components["schemas"]["Partial_Record_PokeapiVersionGroups._levelup-Array__id-number--level-number__--tm-Array__id-number__--breed-Array__id-number__--tutor-Array__id-number__--other-Array__id-number--learnMethod-string_____"];
            encounters: components["schemas"]["Partial_Record_PokeapiGameNames.Record_string.Array__method-string--minLevel-number--maxLevel-number--chance-number--conditions-Array_string______"];
            stats: components["schemas"]["Record_PokeapiStatType.StatValue_"] & components["schemas"]["Record_average.StatValue_"];
            __meta: {
                description: string;
                previewImage: string;
                title: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetAllTagsForUser: {
        parameters: {
            query?: {
                /** @description If this is provided, this user's public tags will be returned. If omitted, the currently authenicated user will be used */
                userId?: string;
                /** @description Pagination */
                page?: number;
                sortKey?: "added" | "id" | "alphabetical" | "custom";
                sortOrder?: "desc" | "asc" | "custom";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All tags - 20 per page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: double */
                        totalPages: number;
                        /** Format: double */
                        currentPage: number;
                        tags: components["schemas"]["Tags"][];
                    };
                };
            };
            /** @description Unauthorised */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    GetPokemonById: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PokemonV1Response"];
                };
            };
        };
    };
}
